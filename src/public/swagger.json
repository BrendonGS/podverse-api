{
  "swagger": "2.0",
  "info": {
    "description": "Data API, database migration scripts, and backend services for all Podverse models.",
    "version": "1.0.7",
    "title": "Podverse API",
    "termsOfService": "https://podverse.fm/terms/",
    "contact": {
      "email": "dev@podverse.fm"
    },
    "license": {
      "name": "GNU Affero General Public License v3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  },
  "host": "localhost:1234",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "auth",
      "description": "authentication related endpoints"
    },
    {
      "name": "author",
      "description": "podcast hosts, co-hosts, and guests"
    },
    {
      "name": "bitpayInvoice",
      "description": "the BitPay order object"
    },
    {
      "name": "category",
      "description": "aka genre"
    },
    {
      "name": "episode"
    },
    {
      "name": "feedUrl",
      "description": "official podcast feed URLs"
    },
    {
      "name": "mediaRef",
      "description": "references to sections of audio/video"
    },
    {
      "name": "paypalOrder",
      "description": "the PayPal order object"
    },
    {
      "name": "playlist",
      "description": "lists of mediaRefs"
    },
    {
      "name": "podcast"
    },
    {
      "name": "user"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login as user",
        "description": "Sets a bearer token in the Authentication cookie",
        "operationId": "authLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string",
                "password": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset a user's password",
        "description": "Reset a user's password if the correct token is provided",
        "operationId": "authResetPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "password": "string",
                "resetPasswordToken": "guid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found or invalid token"
          }
        }
      }
    },
    "/auth/send-reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Send email to reset user's password",
        "description": "Sends email to user that directs the user to the password reset page, along with a resetPasswordToken",
        "operationId": "authSendResetPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token has expired"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Sign up new user",
        "description": "Create a new user, and send verification email",
        "operationId": "authSignUp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string",
                "name": "string",
                "password": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/send-verification": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Send email to verify a user's email address",
        "description": "Send email to verify a user's email address",
        "operationId": "authSendVerification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/verify-email": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Verify a user's email address",
        "description": "Verification is successful if a valid emailVerificationToken is included in the request",
        "operationId": "authVerifyEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token has expired"
          },
          "404": {
            "description": "User not found or invalid verification token"
          }
        }
      }
    },
    "/auth/get-authenticated-user-info": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Get the currently logged-in user's info",
        "description": "Returns an object with the currently logged-in user's info",
        "operationId": "getAuthenticatedUserInfo",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/auth/mediaRefs": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get the currently logged-in user's mediaRefs",
        "description": "Returns an array of the currently logged-in user's mediaRefs",
        "operationId": "getAuthMediaRefs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/auth/playlists": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get the currently logged-in user's playlists",
        "description": "Returns an array of the currently logged-in user's playlists",
        "operationId": "getAuthPlaylists",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/author": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Find authors by fields",
        "description": "Returns an array of authors",
        "operationId": "getAuthors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "slug",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          }
        }
      }
    },
    "/author/{authorId}": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Get author by ID",
        "description": "Returns an author object",
        "operationId": "getAuthorById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorId",
            "in": "path",
            "description": "ID of author to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "404": {
            "description": "Author not found"
          }
        }
      }
    },
    "/bitpay/invoice/{bitpayInvoiceId}": {
      "get": {
        "tags": [
          "bitpayInvoice"
        ],
        "summary": "Get bitpayInvoice by ID",
        "description": "Returns a logged-in user's bitpayInvoice object",
        "operationId": "getBitPayInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bitpayInvoiceId",
            "in": "path",
            "description": "ID of bitpayInvoice to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BitPayInvoice"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "BitPayInvoice not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/bitpay/invoice": {
      "post": {
        "tags": [
          "bitpayInvoice"
        ],
        "summary": "Add a bitpayInvoice",
        "description": "Returns a new bitpayInvoice object",
        "operationId": "createBitPayInvoice",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BitPayInvoice"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/bitpay/notification": {
      "post": {
        "tags": [
          "bitpayInvoice"
        ],
        "summary": "Handle webhook notifications to update a BitPayInvoice object",
        "description": "When a request is made to this endpoint, it takes the invoiceID from the request and makes a request to BitPay to get the latest status for invoice with that id. If the invoice returned from BitPay was updated more recently than the version stored locally, then the local version is updated. Always returns status 200 so that BitPay stops sending the notification.",
        "operationId": "notificationBitPayInvoice",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BitPayInvoice"
            }
          }
        }
      }
    },
    "/category": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Find categories by fields",
        "description": "Returns an array of categories",
        "operationId": "getCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "slug",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        }
      }
    },
    "/category/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get category by ID",
        "description": "Returns a category object",
        "operationId": "getCategoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/episode": {
      "get": {
        "tags": [
          "episode"
        ],
        "summary": "Find episodes by fields",
        "description": "Returns an array of episodes. Set includePodcast = true if you want the podcast included in the response. Pass a string to searchAllFieldsText to filter based on episode title.",
        "operationId": "getEpisodes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authors",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "type": "string"
          },
          {
            "name": "categories",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "episodeType",
            "in": "query",
            "type": "string"
          },
          {
            "name": "guid",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "imageUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "includePodcast",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "isExplicit",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "linkUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mediaUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mediaRefs",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "pubDate",
            "in": "query",
            "type": "string",
            "format": "date"
          },
          {
            "name": "searchAllFieldsText",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          }
        }
      }
    },
    "/episode/{episodeId}": {
      "get": {
        "tags": [
          "episode"
        ],
        "summary": "Get episode by ID",
        "description": "Returns an episode object",
        "operationId": "getEpisodeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "episodeId",
            "in": "path",
            "description": "ID of episode to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          },
          "404": {
            "description": "Episode not found"
          }
        }
      }
    },
    "/feedUrl": {
      "get": {
        "tags": [
          "feedUrl"
        ],
        "summary": "Find feedUrls by fields",
        "description": "Returns an array of feedUrls",
        "operationId": "getFeedUrls",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isAuthority",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          },
          {
            "name": "url",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FeedUrl"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          }
        }
      }
    },
    "/feedUrl/{feedUrlId}": {
      "get": {
        "tags": [
          "feedUrl"
        ],
        "summary": "Get feedUrl by ID",
        "description": "Returns a single feedUrl object",
        "operationId": "getFeedUrlById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedUrlId",
            "in": "path",
            "description": "ID of feedUrl to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FeedUrl"
            }
          },
          "404": {
            "description": "FeedUrl not found"
          }
        }
      }
    },
    "/mediaRef": {
      "get": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Find mediaRefs by fields",
        "description": "Returns an array of mediaRefs. Pass a string to searchAllFieldsText to filter based on clip, episode, or podcast title.",
        "operationId": "getMediaRefs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authors",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "episodeDuration",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "episodeId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "episodeImageUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "episodeLinkUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "episodeMediaUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "episodePubDate",
            "in": "query",
            "type": "string",
            "format": "date"
          },
          {
            "name": "episodeSummary",
            "in": "query",
            "type": "string"
          },
          {
            "name": "episodeTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "podcastFeedUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "podcastGuid",
            "in": "query",
            "type": "string"
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "podcastImageUrl",
            "in": "query",
            "type": "string"
          },
          {
            "name": "podcastIsExplicit",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "podcastTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchAllFieldsText",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "title",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          }
        }
      },
      "post": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Add a mediaRef",
        "description": "Returns a new mediaRef object",
        "operationId": "createMediaRef",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "authors": ["id"],
                "categories": ["id"],
                "description": "string",
                "endTime": "integer",
                "episodeDuration": "integer",
                "episodeGuid": "string",
                "episodeId": "string",
                "episodeImageUrl": "url",
                "episodeLinkUrl": "url",
                "episodeMediaUrl": "url",
                "episodePubDate": "date",
                "episodeSummary": "string",
                "episodeTitle": "string",
                "isPublic": "boolean",
                "ownerId": "string",
                "podcastFeedUrl": "url",
                "podcastGuid": "string",
                "podcastId": "string",
                "podcastImageUrl": "url",
                "podcastIsExplicit": "boolean",
                "podcastTitle": "string",
                "startTime": "integer",
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "patch": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Update a mediaRef",
        "description": "Returns the updated mediaRef object",
        "operationId": "updateMediaRef",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "endTime": "integer",
                "id": "string - required",
                "isPublic": "boolean",
                "startTime": "integer",
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/mediaRef/{mediaRefId}": {
      "get": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Get mediaRef by ID",
        "description": "Returns a single mediaRef object",
        "operationId": "getMediaRefById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mediaRefId",
            "in": "path",
            "description": "ID of mediaRef to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "404": {
            "description": "MediaRef not found"
          }
        }
      },
      "delete": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Delete mediaRef by ID",
        "description": "Returns success or error message",
        "operationId": "getMediaRefById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mediaRefId",
            "in": "path",
            "description": "ID of mediaRef to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "MediaRef not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/order/{paypalOrderId}": {
      "get": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Get paypalOrder by ID",
        "description": "Returns a logged-in user's paypalOrder object",
        "operationId": "getPayPalOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paypalOrderId",
            "in": "path",
            "description": "ID of paypalOrder to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PayPalOrder"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "PayPalOrder not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/order": {
      "post": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Add a paypalOrder",
        "description": "Returns a new paypalOrder object",
        "operationId": "createPayPalOrder",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/BitPayInvoice"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/webhooks/payment-completed": {
      "post": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Handle webhook notifications to update a PayPalOrder object",
        "description": "When an request is made to this endpoint, it then takes the request body and passes it into a request to PayPal to verify the order is valid. If it is, then locally we check if the notification is newer than the last updated date of the paypalOrder, and if that is true the paypalOrder is updated with the latest status. Always returns status 200 so that PayPal stops sending the notification (I haven't confirmed if that's needed actually).",
        "operationId": "webhooksPaymentCompletedPayPal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PayPalOrder"
            }
          }
        }
      }
    },
    "/playlist": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Find playlists by fields",
        "description": "Returns an array of playlists",
        "operationId": "getPlaylists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playlistId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": [
          "playlist"
        ],
        "summary": "Add a playlist",
        "description": "Returns the new playlist object",
        "operationId": "createPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "description": "string",
                "isPublic": "boolean",
                "itemsOrder": ["id"],
                "mediaRefs": ["id"],
                "ownerId": "string",
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "playlist"
        ],
        "summary": "Update a playlist",
        "description": "Returns the updated playlist object",
        "operationId": "updatePlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "description": "string",
                "id": "string - required",
                "isPublic": "boolean",
                "itemsOrder": [
                  "string"
                ],
                "mediaRefs": [
                  "string"
                ],
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/playlist/{playlistId}": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Get playlist by ID",
        "description": "Returns a playlist object",
        "operationId": "getPlaylistById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playlistId",
            "in": "path",
            "description": "ID of playlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "404": {
            "description": "Playlist not found"
          }
        }
      },
      "delete": {
        "tags": [
          "playlist"
        ],
        "summary": "Delete playlist by ID",
        "description": "Returns success or error message",
        "operationId": "getPlaylistById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playlistId",
            "in": "path",
            "description": "ID of playlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Playlist not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/podcast": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Find podcasts by fields",
        "description": "Returns an array of podcasts",
        "operationId": "getPodcasts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categories",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchAuthor",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "number"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Podcast"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/podcast/{podcastId}": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Get podcast by ID",
        "description": "Returns a podcast object",
        "operationId": "getPodcastById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "podcastId",
            "in": "path",
            "description": "ID of podcast to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Podcast"
            }
          },
          "404": {
            "description": "Podcast not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find users by fields",
        "description": "Returns an array of user objects",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user",
        "description": "Returns the new user object",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string - required",
                "name": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by ID",
        "description": "Returns a user object",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user by ID",
        "description": "Returns success or error message",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Author": {
      "type": "object",
      "required": [
        "id",
        "name",
        "slug"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "BitPayInvoice": {
      "type": "object",
      "required": [
        "id",
        "orderId",
        "currency",
        "price",
        "token",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "amountPaid": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "exceptionStatus": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "status": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "transactionCurrency": {
          "type": "string"
        },
        "transactionSpeed": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "slug",
        "title"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "Episode": {
      "type": "object",
      "required": [
        "id",
        "mediaUrl"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "integer"
        },
        "episodeType": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isExplicit": {
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean"
        },
        "linkUrl": {
          "type": "string"
        },
        "mediaFilesize": {
          "type": "integer"
        },
        "mediaType": {
          "type": "string"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "pubDate": {
          "type": "string",
          "format": "date"
        },
        "title": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "mediaRefs": {
          "$ref": "#/definitions/MediaRef"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "FeedUrl": {
      "type": "object",
      "required": [
        "url",
        "podcast"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "isAuthority": {
          "type": "boolean"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "MediaRef": {
      "type": "object",
      "required": [
        "id",
        "episodeMediaUrl",
        "startTime"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "episodeMediaUrl": {
          "type": "string"
        },
        "startTime": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "endTime": {
          "type": "integer"
        },
        "episodeDuration": {
          "type": "integer"
        },
        "episodeGuid": {
          "type": "string"
        },
        "episodeId": {
          "type": "string"
        },
        "episodeImageUrl": {
          "type": "string"
        },
        "episodeLinkUrl": {
          "type": "string"
        },
        "episodePubDate": {
          "type": "string",
          "format": "date"
        },
        "episodeSummary": {
          "type": "string"
        },
        "episodeTitle": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "ownerId": {
          "type": "string"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "podcastFeedUrl": {
          "type": "string"
        },
        "podcastGuid": {
          "type": "string"
        },
        "podcastId": {
          "type": "string"
        },
        "podcastImageUrl": {
          "type": "string"
        },
        "podcastIsExplicit": {
          "type": "boolean"
        },
        "podcastTitle": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "episode": {
          "$ref": "#/definitions/Episode"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "PayPalOrder": {
      "type": "object",
      "required": [
        "paymentID"
      ],
      "properties": {
        "paymentID": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Playlist": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isMyClips": {
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean"
        },
        "itemsOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "mediaRefs": {
          "$ref": "#/definitions/MediaRef"
        },
        "owner": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Podcast": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "feedLastUpdated": {
          "type": "string",
          "format": "date"
        },
        "guid": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isExplicit": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "linkUrl": {
          "type": "string"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "episodes": {
          "$ref": "#/definitions/Episode"
        },
        "feedUrls": {
          "$ref": "#/definitions/FeedUrl"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subscribedPodcastIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "playlists": {
          "$ref": "#/definitions/Playlist"
        }
      }
    }
  }
}
